import {
    PageFragment,
    Paragraph,
    Heading,
    Img,
    CodeBlock,
    InputToOutput,
    Question,
} from "./PageFragment.js";

interface Page {
    subtitle: string;
    contents: PageFragment[];
}
interface Topic {
    title: string;
    pages: Page[];
}

const inicio: Page[] = [
    {
        subtitle: "Javascript",
        contents: [
            new Paragraph(
                "JavaScript √© uma linguagem de programa√ß√£o que foi criada inicialmente para utiliza√ß√£o em websites, mas hoje em dia aparece em diversos outros lugares.\
                A linguagem foi criada em 1995, mas foi atualizada ao longo dos anos."
            ),
            new Paragraph(
                "Em compara√ß√£o com outras linguagens de programa√ß√£o, JavaScript √© uma das mais f√°ceis de aprender, tornando-a uma boa primeira escolha."
            ),
            new Paragraph("Essa √© uma introdu√ß√£o ao utilizamento da forma moderna dela."),
        ],
    },
    {
        subtitle: "Estrutura b√°sica",
        contents: [
            new Paragraph("Para come√ßar, vou introduzir esse peda√ßo de c√≥digo:"),
            new CodeBlock("console.log(1234)"),
            new Paragraph(
                "Essas palavras no come√ßo, <code>console.log</code>, v√£o aparecer diversas vezes por aqui."
            ),
            new Paragraph(
                'Voc√™ usa isso quando quiser mostar algo na tela. Mais especificamente, mostrar num tal de "console".\
                Voc√™ escolhe o que quer que apare√ßa entre os par√™nteses.'
            ),
            new Paragraph(
                "Aqui, essa vai ser a √∫nica fun√ß√£o do console, e ele vai ser representado assim: com o c√≥digo na esquerda e o resultado na direita:"
            ),
            new CodeBlock("console.log(1234)", "1234"),
            new Paragraph(
                "N√∫meros n√£o s√£o a √∫nica op√ß√£o para escolher. Podemos usar texto tamb√©m, por exemplo. Use a caixa de texto para escolher uma palavra, ou mais de uma:"
            ),
            new InputToOutput('console.log("@")', "text", v => v),
            new Paragraph("Lembrando que o c√≥digo na esquerda gera o resultado na direita."),
            new Paragraph(
                'Voc√™ pode ter percebido que eu coloquei aspas no exemplo anterior, as aspas s√£o usadas no come√ßo e fim de peda√ßos de texto.\
                O console mostra as aspas tamb√©m, diferente dos n√∫meros que mostrou anteriormente.\
                Um valor de texto √© chamado pelo nome ingl√™s <i>"string"</i>. Nos c√≥digos daqui eles v√£o aparecer em laranja.'
            ),
            new Paragraph("S√£o usadas linhas diferentes para cada instru√ß√£o."),
            new CodeBlock('console.log("girafa")\nconsole.log(-5)', '"girafa"\n-5'),
            new Heading("Coment√°rios"),
            new Paragraph(
                "Duas barras <code>//</code> representam o come√ßo de um coment√°rio, que faz o resto da linha ser ignorada completamente na hora de execu√ß√£o.\
                Coment√°rios v√£o ficar em cinza."
            ),
            new CodeBlock("//Este √© um coment√°rio, fino senhor üóøüç∑\n"),
        ],
    },
    {
        subtitle: "Vari√°veis",
        contents: [
            new Paragraph(
                "Vari√°veis s√£o o conceito b√°sico mais importante. Elas funcionam como caixas de informa√ß√µes, voc√™ armazena alguma coisa nela e pode retirar o que tem dentro depois."
            ),
            new Paragraph(
                "Para criar uma vari√°vel voc√™ usa a palavra especial <code>let</code> e precisa dar um nome para ela:"
            ),
            new CodeBlock("let nome"),
            new Paragraph(
                'Fazer isso recebe o nome de "declarar" uma vari√°vel.\
                √â importante notar que esse nome n√£o pode conter espa√ßos. Se voc√™ quiser mais de uma palavra no nome, em vez de espa√ßos √© comum juntarAsPalavrasDesseJeito.'
            ),
            new CodeBlock("let nomeMaisComprido"),
            new Paragraph(
                "Para fazer a vari√°vel √∫til √© preciso dar um valor para ela.\
                Esse valor pode ser por exemplo um n√∫mero, uma letra, uma palvra, uma frase, o dicion√°rio todo..."
            ),
            new CodeBlock("let numero = 15\nlet contaBancaria = -1.99"),
            new Paragraph("Usa-se um ponto em vez de uma v√≠rgula para n√∫meros quebrados."),
            new Paragraph(
                "Quando voc√™ quiser colocar uma <i>string</i> numa vari√°vel, novamente, precisa usar aspas."
            ),
            new CodeBlock('let professor = "Girafales"\nlet frase = "Voc√™ vem sempre aqui?"'),
            new Paragraph(
                "O s√≠mbolo de igual aqui pode parecer meio estranho, ele s√≥ representa a a√ß√£o de colocar um valor numa vari√°vel, na esquerda do igual fica o nome dela e na direita o valor.\
                Depois de criar uma, pode mudar o valor dela de acordo com a segunda linha de c√≥digo abaixo:"
            ),
            new CodeBlock(
                'let saudacao = "Bom dia, boa tarde, boa noite."\nsaudacao = "Sauda√ß√µes, terr√°queos! Eu venho em paz."'
            ),
            new Paragraph(
                "Como a fun√ß√£o do <code>let</code> √© s√≥ declarar (criar) vari√°veis, n√£o reapareceu na segunda linha."
            ),
            new Paragraph(
                "No lugar de <code>let</code>, voc√™ tamb√©m pode usar <code>const</code>.\
                A diferen√ßa √© que uma vari√°vel criada com <code>const</code> n√£o pode ser alterada mais."
            ),
            new CodeBlock("const sentidoDaVida = 42"),
            new Paragraph(
                "E para ver o valor da vari√°vel, o <code>console.log()</code> de antes voltou."
            ),
            new InputToOutput("let importante = @\nconsole.log(importante)", "number", v =>
                Number(v)
            ),
            new Paragraph(
                "No lugar do n√∫mero ou palavra de antes voc√™ coloca o nome da vari√°vel. \
                N√£o s√≥ nesse caso, mas <b>em qualquer lugar que voc√™ pode usar um n√∫mero, voc√™ tamb√©m pode usar uma vari√°vel de n√∫mero</b>.\
                O mesmo vale para outros tipos de vari√°vel."
            ),
        ],
    },
    {
        subtitle: "Opera√ß√µes matem√°ticas",
        contents: [
            new Paragraph("Em c√≥digo, existem as opera√ß√µes matem√°ticas b√°sicas."),
            new CodeBlock("console.log(2 + 2)\nconsole.log(18 - 5)", "4\n13"),
            new Paragraph("O resultado das opera√ß√µes pode ser colcocado numa vari√°vel:"),
            new CodeBlock("let resultado = 6 * 4\nconsole.log(resultado)", "24"),
            new Paragraph("Ou pode ser obtido de uma vari√°vel:"),
            new CodeBlock("let valorInicial = 38\nconsole.log(valorInicial / 2)", "19"),
            new Paragraph("Ou os dois:"),
            new CodeBlock("let numero = 68\nnumero = numero + 1\nconsole.log(numero)", "69"),
            new Paragraph(
                "Esse <code>numero = numero + 1</code> no meio do c√≥digo acima √© uma ideia importante e vai voltar no futuro.\
                Ele aumenta a vari√°vel em 1, o processo √© assim:"
            ),
            new Paragraph("numero = numero + 1"),
            new Paragraph("numero = 68 + 1"),
            new Paragraph("numero = 69"),
            new Paragraph(
                "Similarmente, algo como <code>numero = numero * 2</code> dobra o valor."
            ),
            new Paragraph(
                "Opera√ß√µes usam a mesma ordem do que a matem√°tica: multiplica√ß√£o e divis√£o acontecem primeiro, depois soma e subtra√ß√£o.\
                Usar par√™nteses tamb√©m √© poss√≠vel."
            ),
            new CodeBlock("console.log(5 + 3 * 3)", "14"),
            new CodeBlock("console.log((5 + 3) * 3)", "24"),
            new Paragraph("Por √∫ltimo, o s√≠mbolo de mais tamb√©m combina <i>strings</i>:"),
            new CodeBlock('console.log("o" + "i")', '"oi"'),
            new Paragraph("D√™ uma olhada no c√≥digo a seguir:"),
            new CodeBlock(
                'let frase = "Ol√°,"\nfrase = frase + "Mundo"\nfrase + "!"\nconsole.log(frase)'
            ),
            new Question(
                "O que vai aparecer no console quando for executado?",
                [
                    '<code>"Ol√°, Mundo!"</code>',
                    '<code>"Ol√°,Mundo!"</code>',
                    '<code>"Ol√°, Mundo"</code>',
                    '<code>"Ol√°,Mundo"</code>',
                ],
                3,
                "Espa√ßos <b>n√£o</b> s√£o inseridos automaticamente entre palavras.\
                A terceira linha de c√≥digo n√£o faz nada pois √© preciso um sinal de igual para alterar a vari√°vel."
            ),
        ],
    },
];

const listas: Page[] = [
    {
        subtitle: "Criando uma lista",
        contents: [
            new Paragraph(
                'Listas s√£o uma maneira de agregar informa√ß√µes. Uma lista tamb√©m pode ser chamada de "vetor",\
                ou por seu nome em ingl√™s, <i>"Array"</i> Uma lista √© criada com [colchetes] e v√≠rgulas:'
            ),
            new CodeBlock(
                'let minhaListaDeCompras = ["p√£o", "leite", "arroz", "queijo", "5 litros de √°cido sulf√∫rico"]'
            ),
            new Paragraph("Uma lista pode conter qualquer coisa que uma vari√°vel pode."),
            new CodeBlock(
                'let numeros = [0, 1, 2, 3, 4, 5]\n//e pode misturar coisas, mas isso n√£o √© t√£o comum\nlet listaMisturada = [6.5, "alface", -10]'
            ),
            new Paragraph("Pode conter a mesma coisa mais de uma vez:"),
            new CodeBlock(
                'let listaDeComprasMelhor = ["p√£o", "leite", "arroz", "leite", "queijo", "leite", "leite"]'
            ),
            new Paragraph("Pode ainda n√£o conter nada:"),
            new CodeBlock("let politicosHonestos = []"),
            new Paragraph("Para saber quantas coisas est√£o numa lista usamos <code>.length</code>"),
            new CodeBlock(
                "console.log(listaDeComprasMelhor.length)\nconsole.log(listaDeComprasMelhor)",
                '7\n["p√£o", "leite", "arroz", "leite", "queijo", "leite", "leite"]'
            ),
            new Paragraph("Isso tamb√©m funciona para descobrir o tamanho de uma <i>string</i>."),
            new CodeBlock('console.log("abcdefghijklmnopqrstuvwxyz".length)', "26"),
        ],
    },
    {
        subtitle: "Acesso",
        contents: [
            new Paragraph(
                "Para acessar itens individuais de uma lista voc√™ usa os colchetes de novo, e coloca dentro a posi√ß√£o.\
                Cada posi√ß√£o √© um n√∫mero diferente, <b>come√ßando do 0!</b>. Essa posi√ß√£o √© chamada de √≠ndice."
            ),
            new CodeBlock("let numeros = [2, 4, 8, 16]"),
            new CodeBlock(
                "console.log(numeros[0])\nconsole.log(numeros[2])",
                "[2, 4, 8, 16]\n2\n8"
            ),
            new Paragraph(
                "O mesmo truque funciona para extrair caracterers individuais de uma string.\
                Espa√ßos s√£o caracteres tamb√©m. Novamente a primeira letra fica na posi√ß√£o 0."
            ),
            new InputToOutput(
                'let frase = "Calma, tudo passa. Nem que seja por cima de voc√™."\nconsole.log(frase[@])',
                "number",
                input => "Calma, tudo passa. Nem que seja por cima de voc√™."[Number(input)]
            ),
            new Paragraph(
                "Enquanto escolhia um n√∫emro, voc√™ pode ter se deparado com o resultado <code>undefined</code>.\
                Ele singnifica indefinido, e aparece se escolher um n√∫mero muito grande, ou um n√∫mero negativo, ou um n√∫mero n√£o inteiro,\
                pois esses n√∫meros n√£o s√£o posi√ß√µes v√°lidas."
            ),
            new Paragraph("Onde encaixa um n√∫mero encaixa uma vari√°vel de n√∫mero:"),
            new CodeBlock(
                "let lista = [55, 44, 33, 22, 11]\nlet indice = 1\nconsole.log(frase[indice])\nconsole.log(frase[2 + 2]) //e uma opera√ß√£o tamb√©m",
                "44\n11"
            ),
            new Paragraph("Qual o resultado do c√≥digo abaixo?"),
            new CodeBlock('let string = "98765-4321"\nconsole.log(string[string.length - 1])'),
            new Question(
                "",
                [
                    "<code>undefined</code>",
                    '<code>"1"</code>',
                    '<code>"2"</code>',
                    '<code>"9"</code>',
                ],
                1,
                "O tamanho da string √© 10, ent√£o o resultado √© o mesmo que <code>string[10 - 1]</code>.\
                Come√ßando do 0, o caractere na posi√ß√£o 9 √© o √∫ltimo.\
                As aspas ainda aparecem porque o 1 √© parte de uma string, ent√£o tem a fun√ß√£o de caractere."
            ),
        ],
    },
    {
        subtitle: ".at()",
        contents: [
            new Paragraph(
                "O c√≥digo anterior sempre resulta no √∫ltimo caractere de uma string, ou no √∫ltimo item de uma lista."
            ),
            new InputToOutput(
                'let string = "@"\nconsole.log(string[string.length - 1])',
                "text",
                v => v.at(-1)
            ),
            new Paragraph("√â comum fazer este tipo de coisa, mas existe um jeito mais simples:"),
            new CodeBlock("let ultimo = [4, 0, 0, 2, 8, 9, 2, 2].at(-1)\nconsole.log(ultimo)", "2"),
            new Paragraph(
                "<code>.at()</code> funciona igual ao <code>[]</code> com n√∫meros positivos,\
                mas al√©m disso, n√∫meros negativos podem ser usados para buscar itens no final."
            ),
            new InputToOutput(
                'let frase = "Calma, tudo passa. Nem que seja por cima de voc√™."\nconsole.log(frase.at(@))',
                "number",
                v => "Calma, tudo passa. Nem que seja por cima de voc√™.".at(Number(v))
            ),
        ],
    },
    {
        subtitle: "Modifica√ß√£o",
        contents: [
            new Paragraph(
                "Para alterar listas depois que elas forem criadas, temos uma variedade de op√ß√µes."
            ),
            new Paragraph("Primeiramente, colchetes tamb√©m s√£o usados substituir itens em listas."),
            new CodeBlock(
                'let lista = ["a", "b", "c", "d"]\nlista[0] = "e"\nconsole.log(lista)',
                '["e", "b", "c", "d"]'
            ),
            new Paragraph(
                "Listas podem ser aumentadas com as opera√ß√µes <code>.push()</code> e <code>.unshift()</code>:"
            ),
            new CodeBlock(
                "let lista = [2, 4, 8, 16, 32]\nlista.push(16 * 2) //adiciona ao final\nlista.unshift(1) //adiciona ao come√ßo\nconsole.log(lista)",
                "[1, 2, 4, 8, 16, 32]"
            ),
            new Paragraph("Dessa vez o s√≠mbolo de igual n√£o √© usado."),
            new Paragraph(
                "Tamb√©m √© poss√≠vel adicionar mais de um item por vez com essas opera√ß√µes:"
            ),
            new CodeBlock(
                'let animais = ["girafa", "bicho-pregui√ßa"]\nanimais.push("diabo da tasm√¢nia", "axolote")\n' +
                    'animais.unshift("ornitorrinco", "peixe-bolha", "capivara")\nconsole.log(animais)',
                '["ornitorrinco", "peixe-bolha", "capivara", "girafa", "bicho-pregui√ßa", "diabo da tasm√¢nia", "axolote"]'
            ),
            new Paragraph(
                "Para remover itens de uma listam, existem <code>.pop()</code> e <code>.shift()</code>.\
                O item removido acaba sendo o resultado, isso quer dizer que a opera√ß√£o pode ser usada no lugar de outros valores:"
            ),
            new CodeBlock(
                "let lista = [1, 1, 2, 3, 5, 8, 13]\nlet ultimo = lista.pop() //remove do final\nlet primeiro = lista.shift() //remove do come√ßo\n" +
                    "console.log(lista)\nconsole.log(ultimo)\nconsole.log(primeiro)",
                "[1, 2, 3, 5, 8]\n13\n1"
            ),
        ],
    },
];

const repeticoesCondicoes: Page[] = [
    {
        subtitle: "De novo!",
        contents: [
            new Paragraph(
                "Digamos que voc√™ tem uma lista de pre√ßos e quer descobrir o total dela. Como faria?"
            ),
            new CodeBlock("let precos = [24.99, 9.99, 11.99, 69.90]"),
            new Paragraph("Talvez assim:"),
            new CodeBlock("console.log(precos[0] + precos[1] + precos[2] + precos[3])", "116.87"),
            new Paragraph(
                "Funcionou. Mas o que acontece se vc decidir que quer comprar mais alguma coisa?"
            ),
            new CodeBlock(
                "precos.push(8.50)\nconsole.log(precos)\nconsole.log(precos[0] + precos[1] + precos[2] + precos[3])",
                "[24.99, 9.99, 11.99, 69.90, 8.50]\n116.87"
            ),
            new Paragraph("Agora tem uma coisa a mais na lista mas o resultado foi o mesmo. :("),
            new Paragraph("√â claro que d√° para adaptar o c√≥digo:"),
            new CodeBlock(
                "console.log(precos[0] + precos[1] + precos[2] + precos[3] + precos[4])",
                "125.37"
            ),
            new Paragraph(
                "Por√©m seria mais conveniente se existisse um peda√ßo de c√≥digo que funcionasse sempre."
            ),
            new Paragraph(
                "Olha s√≥, tem mesmo! At√© parece que eu sabia que ele existia esse tempo todo."
            ),
            new CodeBlock(
                "//continuando com a lista de pre√ßos anterior\nlet total = 0\nfor (const valor of precos) {\n\ttotal = total + valor\n}\nconsole.log(total)",
                "125.37"
            ),
            new Paragraph("Eu sei, tem muita coisa acontecendo a√≠. A parte essencial √© essa:"),
            new CodeBlock("for (const valor of precos) {\n\n}"),
            new Paragraph(
                "<code>for</code> e <code>of</code> s√£o mais 2 palavras especiais.\
                Usando esse c√≥digo, qualquer instru√ß√£o entre as {chaves} √© repetida uma vez por item na lista."
            ),
            new CodeBlock(
                'let letras = ["a", "b", "c"]\nfor (const valor of letras) {\n\t//3 vezes\n\tconsole.log("De novo!")\n}',
                '"De novo!"\n"De novo!"\n"De novo!"'
            ),
            new Paragraph(
                "O espa√ßo vazio no come√ßo das linhas deixa mais f√°cil de ver o que est√° entre as chaves."
            ),
            new Paragraph(
                "Esse <code>const valor</code> √© algo que voc√™ j√° viu: esse c√≥digo cria uma vari√°vel chamada valor.\
                Cada vez que o c√≥digo interior executa, a vari√°vel criada cont√©m um item da lista, em ordem. Voc√™ pode escolher o nome dela."
            ),
            new CodeBlock(
                "let sequencia = [0, 1, 2, 3]\nfor (const numero of sequencia) {\n\tconsole.log(numero)\n}",
                "0\n1\n2\n3"
            ),
            new Paragraph(
                "Voc√™ tamb√©m j√° viu que <code>total = total + valor</code> soma o valor √† vari√°vel total.\
                Como esse peda√ßo do c√≥digo est√° entre as chaves, ele executa com a lista toda, somando toda a lista no total.\
                Veja uma vers√£o um pouco diferente:"
            ),
            new CodeBlock(
                "//lembrando que a lista √© [24.99, 9.99, 11.99, 69.90, 8.50]\nlet total = 0\nfor (const valor of precos) {\n\ttotal = total + valor\n\tconsole.log(total)\n}",
                "24.99\n34.98\n46.97\n116.87\n125.37"
            ),

            new Paragraph("E ent√£o, qual valor esse c√≥digo mostra na tela?"),
            new CodeBlock(
                "let resultado = 100\nfor (const v of [40, 10, 10]) {\n\tresultado = resultado - v\n}\nconsole.log(resultado)"
            ),
            new Question(
                "",
                ["20", "30", "40", "60"],
                2,
                "O resultado come√ßa em 100 e √© reduzido por cada item na lista, ou seja, 100 - 40 - 10 - 10."
            ),
        ],
    },
    {
        subtitle: "Condi√ß√µes",
        contents: [
            new Paragraph(
                "Por enquanto todo o c√≥digo aqui foi executado 1 ou mais vezes.\
                Mas √†s vezes voc√™ precisa que um peda√ßo do c√≥digo n√£o seja sempre executado. Introzudindo, <code>if</code>:"
            ),
            new CodeBlock('if (10 > 5) {\n\tconsole.log("Executei!")\n}', '"Executei!"'),
            new CodeBlock('if (10 < 5) {\n\tconsole.log("Executei!")\n}', ""),
            new Paragraph(
                'O segundo bloco n√£o faz nada mesmo. A palavra <i>"if"</i> significa "se", em ingl√™s, e usando ela o c√≥digo consegue ir por caminhos diferentes.\
                O primeiro bloco executa porque 10 > 5 √© verdadeiro. O s√≠mbolo > √© chamado de "maior do que".\
                O resultado dele √© verdadeiro <b><i>se</i></b> o primeiro n√∫mero √© <b>maior do que</b> o segundo.'
            ),
            new CodeBlock(
                "console.log(10 > 5) //true significa verdadeiro\nconsole.log(0 > 1) //false significa falso",
                "true\nfalse"
            ),
            new Paragraph('O s√≠mbolo < √© o oposto, ele se chama "menor do que".'),
            new CodeBlock(
                "console.log(10 < 5) //10 n√£o √© menor do que 5\nconsole.log(0 < 1) //0 √© menor do que 1",
                "false\ntrue"
            ),
            new Paragraph("Se os n√∫meros s√£o iguais, o resultado dos dois √© sempre falso."),
            new CodeBlock("console.log(3 > 3)\nconsole.log(-1 < -1)", "false\nfalse"),
            new Paragraph("Existem mais alguns s√≠mbolos importantes:"),
            new CodeBlock("console.log(3 === 3)\nconsole.log(3 !== 3)", "true\nfalse"),
            new Paragraph(
                "O s√≠mbolo <code>===</code> checa se os n√∫meros s√£o iguais. Cuide para n√£o confundir com o <code>=</code> que define vari√°veis.\
                J√° o s√≠mbolo <code>!==</code> √© o oposto, checa se os n√∫meros s√£o diferentes.\
                Eles tamb√©m funcionam em strings"
            ),
            new CodeBlock(
                'console.log("biscoito" === "bolacha")\nconsole.log("biscoito" === "biscoito")',
                "false\ntrue"
            ),
            new Paragraph(
                'O <code>if</code> usa {chaves} igual ao <code>for of</code>, para definir um "bloco de c√≥digo".\
                O bloco de c√≥digo √© o que est√° entre as chaves.\
                Toda vez que s√£o usadas, h√° um espa√ßo em branco no come√ßo da linha como mencionado antes.\
                A diferen√ßa pro <code>for of</code> √© que esse c√≥digo executa 0 ou 1 vez, dependendo da condi√ß√£o ser verdadeira.'
            ),
            new InputToOutput(
                'let numero = @\nif (numero > 0) {\n\tconsole.log("verdadeiro")\n} else {\n\tconsole.log("falso")\n}',
                "number",
                v => (Number(v) > 0 ? "verdadeiro" : "falso")
            ),
            new Paragraph(
                "J√° esse <code>else</code> √© uma adi√ß√£o opcional. O bloco de c√≥digo dele executa quando o <code>if</code> falhar.\
                Volte aos primeiros exemplos da p√°gina pra garantir que entendeu o que aconteceu."
            ),
        ],
    },
    {
        subtitle: "De novo! (de novo)",
        contents: [
            new Paragraph(
                "H√° uma vers√£o um pouco diferente do <code>for of</code>, ela geralmente aparece assim:"
            ),
            new CodeBlock(
                "let repeticoes = 5\nfor (let i = 0; i < repeticoes; i++) {\n\tconsole.log(i)\n}",
                "0\n1\n2\n3\n4"
            ),
        ],
    },
];

//divis√£o em t√≥picos
const data: Topic[] = [
    { title: "In√≠cio", pages: inicio },
    { title: "Listas", pages: listas },
    { title: "Repeti√ß√µes e condi√ß√µes", pages: repeticoesCondicoes },
];

const appName = "Introduzindo JavaScript";

export { data as default, appName, Page, Topic };
